name: schedule-update-and-notify

on:
  workflow_dispatch:
  schedule:
    # 每小时整点执行
    - cron: "0 * * * *"

jobs:
  build-and-notify:
    runs-on: ubuntu-latest
    
    # 授予工作流对仓库内容的写入权限，以允许 git push
    permissions:
      contents: write

    env:
      TZ: Asia/Shanghai

    steps:
      # 步骤 1: 克隆仓库
      - name: Clone repo
        uses: actions/checkout@v4
        with:
          # 必须获取完整的提交历史，才能在后续步骤中比较差异 (git diff)
          fetch-depth: 0

      # 步骤 2: 配置Python环境
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: 'pip'

      # 步骤 3: 安装Python依赖
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # 步骤 4: 配置Git用户信息
      - name: Config git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git pull --rebase

      # 步骤 5: 运行Python脚本以生成或更新文件
      - name: Run python script
        run: python -u main.py
        env:
          ENABLE_DEBUG_PRINT: true

      # 步骤 6: 检查是否有文件变动，并设置一个输出变量
      - name: Check for file changes
        id: git-check
        run: |
          # 检查工作区与上次提交之间是否有差异
          if ! git diff-index --quiet HEAD; then
            echo "Changes detected."
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "No changes to commit."
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      # 步骤 7: 提交并推送变更
      # 仅在检测到有文件变动时才执行此步骤
      - name: Commit and push changes
        if: steps.git-check.outputs.has_changes == 'true'
        run: |
          git add .
          git commit -m "update by github action"
          git push -u origin main

      # 步骤 8: 发送飞书通知
      # 仅在检测到有文件变动时才执行此步骤
      - name: Send Feishu Notification
        if: steps.git-check.outputs.has_changes == 'true'
        env:
          FEISHU_WEBHOOK_URL: ${{ secrets.FEISHU_WEBHOOK_URL }}
        run: |
          # 提取出最新一次提交中所有新增行的纯文本内容
          CLEAN_CONTENT=$(git diff HEAD~1 HEAD | grep '^\+' | grep -v '+++' | sed 's/^+//')

          # 如果没有任何新增内容 (例如，提交只包含删除)，则不发送通知
          if [ -z "$CLEAN_CONTENT" ]; then
            echo "Commit contains no new content. Skipping notification."
            exit 0
          fi

          # 使用 jq 安全地构建 JSON payload，确保内容中的特殊字符被正确处理
          JSON_PAYLOAD=$(jq -n --arg text "$CLEAN_CONTENT" '{msg_type: "text", content: {text: $text}}')

          # 发送最终构建好的、格式正确的 JSON payload
          curl -X POST -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD" \
            "$FEISHU_WEBHOOK_URL"
