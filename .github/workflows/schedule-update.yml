name: schedule-update-and-notify

on:
  workflow_dispatch:
  schedule:
    - cron: "0,45 * * * *"

jobs:
  build-and-notify:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      TZ: Asia/Shanghai

    steps:
      # 步骤 1-7: 保持不变
      - name: Clone repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Config git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.com"
          git config --local user.name "github-actions[bot]"
          git pull --rebase
      - name: Run python script
        run: python -u main.py
        env:
          ENABLE_DEBUG_PRINT: true
      - name: Check for file changes
        id: git-check
        run: |
          if ! git diff-index --quiet HEAD; then
            echo "Changes detected."
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "No changes to commit."
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi
      - name: Commit and push changes
        if: steps.git-check.outputs.has_changes == 'true'
        run: |
          git add .
          git commit -m "update by github action"
          git push -u origin main

      # 步骤 8: ✨ 在 Shell 中构建并发送最终的通知 ✨
      - name: Build and Send Notifications to Multiple Feishu Bots
        if: steps.git-check.outputs.has_changes == 'true'
        env:
          FEISHU_WEBHOOK_URL: ${{ secrets.FEISHU_WEBHOOK_URL }}
          FEISHU_WEBHOOK_URL_TEST: ${{ secrets.FEISHU_WEBHOOK_URL_TEST }}
        run: |
          # 1. 提取和准备所有需要的数据
          CLEAN_CONTENT=$(git diff HEAD~1 HEAD | grep '^\+' | grep -v '+++' | grep -v '<!--' | grep -v '^$+' | sed 's/^+//')
          KR_NEWS=$(echo "$CLEAN_CONTENT" | grep '36kr.com' || true)
          JUEJIN_NEWS=$(echo "$CLEAN_CONTENT" | grep 'juejin.cn' || true)
          GITHUB_NEWS=$(echo "$CLEAN_CONTENT" | grep 'github.com' || true)
          UPDATE_TIME=$(date '+%Y年%m月%d日 %H:%M')

          # 2. 在 Shell 中逐步构建 "elements" JSON 数组
          #    这是本次修正的核心：将所有条件逻辑放在 Shell 中
          ELEMENTS_JSON="[$(jq -n --arg time "$UPDATE_TIME" '{"tag": "div", "text": {"tag": "lark_md", "content": ("**更新时间:** " + $time)}}')]"

          if [ -n "$KR_NEWS" ]; then
            SECTION=$(jq -n --arg content "$KR_NEWS" '[{"tag": "hr"}, {"tag": "div", "text": {"tag": "lark_md", "content": "**36氪 | 热榜**"}}, {"tag": "div", "text": {"tag": "lark_md", "content": $content}}]')
            ELEMENTS_JSON=$(echo "$ELEMENTS_JSON" | jq --argjson section "$SECTION" '. + $section')
          fi

          if [ -n "$JUEJIN_NEWS" ]; then
            SECTION=$(jq -n --arg content "$JUEJIN_NEWS" '[{"tag": "hr"}, {"tag": "div", "text": {"tag": "lark_md", "content": "**掘金 | 热榜**"}}, {"tag": "div", "text": {"tag": "lark_md", "content": $content}}]')
            ELEMENTS_JSON=$(echo "$ELEMENTS_JSON" | jq --argjson section "$SECTION" '. + $section')
          fi

          if [ -n "$GITHUB_NEWS" ]; then
            SECTION=$(jq -n --arg content "$GITHUB_NEWS" '[{"tag": "hr"}, {"tag": "div", "text": {"tag": "lark_md", "content": "**GitHub | Trending**"}}, {"tag": "div", "text": {"tag": "lark_md", "content": $content}}]')
            ELEMENTS_JSON=$(echo "$ELEMENTS_JSON" | jq --argjson section "$SECTION" '. + $section')
          fi

          BUTTONS_JSON='[{"tag": "hr"}, {"tag": "action", "actions": [{"tag": "button", "text": {"tag": "plain_text", "content": "前往 36氪"}, "type": "default", "url": "https://36kr.com/"}, {"tag": "button", "text": {"tag": "plain_text", "content": "前往 掘金"}, "type": "default", "url": "https://juejin.cn/hot"}, {"tag": "button", "text": {"tag": "plain_text", "content": "前往 GitHub"}, "type": "default", "url": "https://github.com/trending"}]}]'
          ELEMENTS_JSON=$(echo "$ELEMENTS_JSON" | jq --argjson buttons "$BUTTONS_JSON" '. + $buttons')

          # 3. 使用一个极其简单的 jq 模板，将构建好的 elements 数组注入
          JSON_PAYLOAD=$(jq -n --argjson elements "$ELEMENTS_JSON" \
          '{
            "msg_type": "interactive",
            "card": {
              "config": { "wide_screen_mode": true },
              "header": { "title": { "tag": "plain_text", "content": "📰 每日热榜简报" }, "template": "blue" },
              "elements": $elements
            }
          }')

          # 4. 循环遍历所有 webhook URL 并发送通知
          for url in "$FEISHU_WEBHOOK_URL" "$FEISHU_WEBHOOK_URL_TEST"; do
            if [ -n "$url" ]; then
              echo "Sending notification to a webhook..."
              curl -X POST -H "Content-Type: application/json" -d "$JSON_PAYLOAD" "$url"
            else
              echo "Skipping an empty webhook URL."
            fi
          done
