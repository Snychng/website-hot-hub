name: schedule-update-and-notify

on:
  workflow_dispatch:
  schedule:
    # 每半小时执行一次 (在每小时的第 0 分钟和第 30 分钟)
    - cron: "0,30 * * * *"

jobs:
  build-and-notify:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write

    env:
      TZ: Asia/Shanghai

    steps:
      # 步骤 1-5: 与之前版本完全相同，负责准备环境和运行脚本
      - name: Clone repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Config git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git pull --rebase
      - name: Run python script
        run: python -u main.py
        env:
          ENABLE_DEBUG_PRINT: true

      # 步骤 6-7: 与之前版本完全相同，负责检查变动并提交
      - name: Check for file changes
        id: git-check
        run: |
          if ! git diff-index --quiet HEAD; then
            echo "Changes detected."
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "No changes to commit."
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi
      - name: Commit and push changes
        if: steps.git-check.outputs.has_changes == 'true'
        run: |
          git add .
          git commit -m "update by github action"
          git push -u origin main

      # 步骤 8: ✨ 发送带跳转按钮的“热榜简报”飞书通知 ✨
      - name: Send Interactive News Digest to Feishu
        if: steps.git-check.outputs.has_changes == 'true'
        env:
          FEISHU_WEBHOOK_URL: ${{ secrets.FEISHU_WEBHOOK_URL }}
        run: |
          # 1. 获取最新提交的新增内容，并进行清理
          CLEAN_CONTENT=$(git diff HEAD~1 HEAD | grep '^\+' | grep -v '+++' | grep -v '<!--' | grep -v '^$+' | sed 's/^+//')

          # 2. 按新的平台来源提取新闻
          KR_NEWS=$(echo "$CLEAN_CONTENT" | grep '36kr.com' || true)
          JUEJIN_NEWS=$(echo "$CLEAN_CONTENT" | grep 'juejin.cn' || true)
          GITHUB_NEWS=$(echo "$CLEAN_CONTENT" | grep 'github.com' || true)

          # 3. 获取当前时间
          UPDATE_TIME=$(date '+%Y年%m月%d日 %H:%M')

          # 4. 使用 jq 动态构建带按钮的消息卡片
          JSON_PAYLOAD=$(jq -n \
            --arg time "$UPDATE_TIME" \
            --arg kr "$KR_NEWS" \
            --arg juejin "$JUEJIN_NEWS" \
            --arg github "$GITHUB_NEWS" \
            '
            # 定义一个函数，用于生成单个来源的新闻模块
            def section(title; content):
              if ($content | length > 0) then
                [
                  {"tag": "hr"},
                  {"tag": "div", "text": {"tag": "lark_md", "content": "**" + title + "**"}},
                  {"tag": "div", "text": {"tag": "lark_md", "content": $content}}
                ]
              else
                []
              end;

            {
              "msg_type": "interactive",
              "card": {
                "config": { "wide_screen_mode": true },
                "header": {
                  "title": { "tag": "plain_text", "content": "📰 每日热榜简报" },
                  "template": "blue"
                },
                "elements": [
                  {"tag": "div", "text": {"tag": "lark_md", "content": ("**更新时间:** " + $time)}}
                ] +
                section("36氪 | 热榜"; $kr) +
                section("掘金 | 热榜"; $juejin) +
                section("GitHub | Trending"; $github) +
                [
                  {"tag": "hr"},
                  {
                    "tag": "action",
                    "actions": [
                      {
                        "tag": "button",
                        "text": { "tag": "plain_text", "content": "前往 36氪" },
                        "type": "default",
                        "url": "https://36kr.com/"
                      },
                      {
                        "tag": "button",
                        "text": { "tag": "plain_text", "content": "前往 掘金" },
                        "type": "default",
                        "url": "https://juejin.cn/hot"
                      },
                      {
                        "tag": "button",
                        "text": { "tag": "plain_text", "content": "前往 GitHub" },
                        "type": "default",
                        "url": "https://github.com/trending"
                      }
                    ]
                  }
                ]
              }
            }
            ')

          # 5. 发送最终构建好的 JSON payload
          curl -X POST -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD" \
            "$FEISHU_WEBHOOK_URL"
